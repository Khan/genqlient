// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package test

import (
	"encoding/json"
	"errors"

	"github.com/Khan/genqlient/graphql"
)

// SimpleSubscriptionResponse is returned by SimpleSubscription on success.
type SimpleSubscriptionResponse struct {
	Count int `json:"count"`
}

// GetCount returns SimpleSubscriptionResponse.Count, and is useful for accessing the field via an interface.
func (v *SimpleSubscriptionResponse) GetCount() int { return v.Count }

// The subscription executed by SimpleSubscription.
const SimpleSubscription_Operation = `
subscription SimpleSubscription {
	count
}
`

// To unsubscribe, use [graphql.WebSocketClient.Unsubscribe]
func SimpleSubscription(
	client_ graphql.WebSocketClient,
) (dataChan_ chan SimpleSubscriptionWsResponse, subscriptionID_ string, err_ error) {
	req_ := &graphql.Request{
		OpName: "SimpleSubscription",
		Query:  SimpleSubscription_Operation,
	}

	dataChan_ = make(chan SimpleSubscriptionWsResponse)
	subscriptionID_, err_ = client_.Subscribe(req_, dataChan_, SimpleSubscriptionForwardData)

	return dataChan_, subscriptionID_, err_
}

type SimpleSubscriptionWsResponse graphql.BaseResponse[*SimpleSubscriptionResponse]

func SimpleSubscriptionForwardData(interfaceChan interface{}, jsonRawMsg json.RawMessage) error {
	var gqlResp graphql.Response
	var wsResp SimpleSubscriptionWsResponse
	err := json.Unmarshal(jsonRawMsg, &gqlResp)
	if err != nil {
		return err
	}
	if len(gqlResp.Errors) == 0 {
		err = json.Unmarshal(jsonRawMsg, &wsResp)
		if err != nil {
			return err
		}
	} else {
		wsResp.Errors = gqlResp.Errors
	}
	dataChan_, ok := interfaceChan.(chan SimpleSubscriptionWsResponse)
	if !ok {
		return errors.New("failed to cast interface into 'chan SimpleSubscriptionWsResponse'")
	}
	dataChan_ <- wsResp
	return nil
}

