package test

// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

import (
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
	"github.com/Khan/genqlient/internal/testutil"
)

// InterfaceListFieldResponse is returned by InterfaceListField on success.
type InterfaceListFieldResponse struct {
	Root        InterfaceListFieldRootTopic         `json:"root"`
	WithPointer *InterfaceListFieldWithPointerTopic `json:"withPointer"`
}

// InterfaceListFieldRootTopic includes the requested fields of the GraphQL type Topic.
type InterfaceListFieldRootTopic struct {
	// ID is documented in the Content interface.
	Id       testutil.ID                                  `json:"id"`
	Name     string                                       `json:"name"`
	Children []InterfaceListFieldRootTopicChildrenContent `json:"-"`
}

func (v *InterfaceListFieldRootTopic) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InterfaceListFieldRootTopic
		Children []json.RawMessage `json:"children"`
		graphql.NoUnmarshalJSON
	}
	firstPass.InterfaceListFieldRootTopic = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Children
		src := firstPass.Children
		*dst = make(
			[]InterfaceListFieldRootTopicChildrenContent,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			err = __unmarshalInterfaceListFieldRootTopicChildrenContent(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal InterfaceListFieldRootTopic.Children: %w", err)
			}
		}
	}
	return nil
}

// InterfaceListFieldRootTopicChildrenArticle includes the requested fields of the GraphQL type Article.
type InterfaceListFieldRootTopicChildrenArticle struct {
	Typename string `json:"__typename"`
	// ID is the identifier of the content.
	Id   testutil.ID `json:"id"`
	Name string      `json:"name"`
}

// InterfaceListFieldRootTopicChildrenContent includes the requested fields of the GraphQL interface Content.
//
// InterfaceListFieldRootTopicChildrenContent is implemented by the following types:
// InterfaceListFieldRootTopicChildrenArticle
// InterfaceListFieldRootTopicChildrenVideo
// InterfaceListFieldRootTopicChildrenTopic
// The GraphQL type's documentation follows.
//
// Content is implemented by various types like Article, Video, and Topic.
type InterfaceListFieldRootTopicChildrenContent interface {
	implementsGraphQLInterfaceInterfaceListFieldRootTopicChildrenContent()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// ID is the identifier of the content.
	GetId() testutil.ID
	// GetName returns the interface-field "name" from its implementation.
	GetName() string
}

func (v *InterfaceListFieldRootTopicChildrenArticle) implementsGraphQLInterfaceInterfaceListFieldRootTopicChildrenContent() {
}

// GetTypename is a part of, and documented with, the interface InterfaceListFieldRootTopicChildrenContent.
func (v *InterfaceListFieldRootTopicChildrenArticle) GetTypename() string { return v.Typename }

// GetId is a part of, and documented with, the interface InterfaceListFieldRootTopicChildrenContent.
func (v *InterfaceListFieldRootTopicChildrenArticle) GetId() testutil.ID { return v.Id }

// GetName is a part of, and documented with, the interface InterfaceListFieldRootTopicChildrenContent.
func (v *InterfaceListFieldRootTopicChildrenArticle) GetName() string { return v.Name }

func (v *InterfaceListFieldRootTopicChildrenVideo) implementsGraphQLInterfaceInterfaceListFieldRootTopicChildrenContent() {
}

// GetTypename is a part of, and documented with, the interface InterfaceListFieldRootTopicChildrenContent.
func (v *InterfaceListFieldRootTopicChildrenVideo) GetTypename() string { return v.Typename }

// GetId is a part of, and documented with, the interface InterfaceListFieldRootTopicChildrenContent.
func (v *InterfaceListFieldRootTopicChildrenVideo) GetId() testutil.ID { return v.Id }

// GetName is a part of, and documented with, the interface InterfaceListFieldRootTopicChildrenContent.
func (v *InterfaceListFieldRootTopicChildrenVideo) GetName() string { return v.Name }

func (v *InterfaceListFieldRootTopicChildrenTopic) implementsGraphQLInterfaceInterfaceListFieldRootTopicChildrenContent() {
}

// GetTypename is a part of, and documented with, the interface InterfaceListFieldRootTopicChildrenContent.
func (v *InterfaceListFieldRootTopicChildrenTopic) GetTypename() string { return v.Typename }

// GetId is a part of, and documented with, the interface InterfaceListFieldRootTopicChildrenContent.
func (v *InterfaceListFieldRootTopicChildrenTopic) GetId() testutil.ID { return v.Id }

// GetName is a part of, and documented with, the interface InterfaceListFieldRootTopicChildrenContent.
func (v *InterfaceListFieldRootTopicChildrenTopic) GetName() string { return v.Name }

func __unmarshalInterfaceListFieldRootTopicChildrenContent(b []byte, v *InterfaceListFieldRootTopicChildrenContent) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Article":
		*v = new(InterfaceListFieldRootTopicChildrenArticle)
		return json.Unmarshal(b, *v)
	case "Video":
		*v = new(InterfaceListFieldRootTopicChildrenVideo)
		return json.Unmarshal(b, *v)
	case "Topic":
		*v = new(InterfaceListFieldRootTopicChildrenTopic)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"Response was missing Content.__typename")
	default:
		return fmt.Errorf(
			`Unexpected concrete type for InterfaceListFieldRootTopicChildrenContent: "%v"`, tn.TypeName)
	}
}

// InterfaceListFieldRootTopicChildrenTopic includes the requested fields of the GraphQL type Topic.
type InterfaceListFieldRootTopicChildrenTopic struct {
	Typename string `json:"__typename"`
	// ID is the identifier of the content.
	Id   testutil.ID `json:"id"`
	Name string      `json:"name"`
}

// InterfaceListFieldRootTopicChildrenVideo includes the requested fields of the GraphQL type Video.
type InterfaceListFieldRootTopicChildrenVideo struct {
	Typename string `json:"__typename"`
	// ID is the identifier of the content.
	Id   testutil.ID `json:"id"`
	Name string      `json:"name"`
}

// InterfaceListFieldWithPointerTopic includes the requested fields of the GraphQL type Topic.
type InterfaceListFieldWithPointerTopic struct {
	// ID is documented in the Content interface.
	Id       testutil.ID                                         `json:"id"`
	Name     string                                              `json:"name"`
	Children []InterfaceListFieldWithPointerTopicChildrenContent `json:"-"`
}

func (v *InterfaceListFieldWithPointerTopic) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InterfaceListFieldWithPointerTopic
		Children []json.RawMessage `json:"children"`
		graphql.NoUnmarshalJSON
	}
	firstPass.InterfaceListFieldWithPointerTopic = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Children
		src := firstPass.Children
		*dst = make(
			[]InterfaceListFieldWithPointerTopicChildrenContent,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			err = __unmarshalInterfaceListFieldWithPointerTopicChildrenContent(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal InterfaceListFieldWithPointerTopic.Children: %w", err)
			}
		}
	}
	return nil
}

// InterfaceListFieldWithPointerTopicChildrenArticle includes the requested fields of the GraphQL type Article.
type InterfaceListFieldWithPointerTopicChildrenArticle struct {
	Typename string `json:"__typename"`
	// ID is the identifier of the content.
	Id   testutil.ID `json:"id"`
	Name string      `json:"name"`
}

// InterfaceListFieldWithPointerTopicChildrenContent includes the requested fields of the GraphQL interface Content.
//
// InterfaceListFieldWithPointerTopicChildrenContent is implemented by the following types:
// InterfaceListFieldWithPointerTopicChildrenArticle
// InterfaceListFieldWithPointerTopicChildrenVideo
// InterfaceListFieldWithPointerTopicChildrenTopic
// The GraphQL type's documentation follows.
//
// Content is implemented by various types like Article, Video, and Topic.
type InterfaceListFieldWithPointerTopicChildrenContent interface {
	implementsGraphQLInterfaceInterfaceListFieldWithPointerTopicChildrenContent()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// ID is the identifier of the content.
	GetId() testutil.ID
	// GetName returns the interface-field "name" from its implementation.
	GetName() string
}

func (v *InterfaceListFieldWithPointerTopicChildrenArticle) implementsGraphQLInterfaceInterfaceListFieldWithPointerTopicChildrenContent() {
}

// GetTypename is a part of, and documented with, the interface InterfaceListFieldWithPointerTopicChildrenContent.
func (v *InterfaceListFieldWithPointerTopicChildrenArticle) GetTypename() string { return v.Typename }

// GetId is a part of, and documented with, the interface InterfaceListFieldWithPointerTopicChildrenContent.
func (v *InterfaceListFieldWithPointerTopicChildrenArticle) GetId() testutil.ID { return v.Id }

// GetName is a part of, and documented with, the interface InterfaceListFieldWithPointerTopicChildrenContent.
func (v *InterfaceListFieldWithPointerTopicChildrenArticle) GetName() string { return v.Name }

func (v *InterfaceListFieldWithPointerTopicChildrenVideo) implementsGraphQLInterfaceInterfaceListFieldWithPointerTopicChildrenContent() {
}

// GetTypename is a part of, and documented with, the interface InterfaceListFieldWithPointerTopicChildrenContent.
func (v *InterfaceListFieldWithPointerTopicChildrenVideo) GetTypename() string { return v.Typename }

// GetId is a part of, and documented with, the interface InterfaceListFieldWithPointerTopicChildrenContent.
func (v *InterfaceListFieldWithPointerTopicChildrenVideo) GetId() testutil.ID { return v.Id }

// GetName is a part of, and documented with, the interface InterfaceListFieldWithPointerTopicChildrenContent.
func (v *InterfaceListFieldWithPointerTopicChildrenVideo) GetName() string { return v.Name }

func (v *InterfaceListFieldWithPointerTopicChildrenTopic) implementsGraphQLInterfaceInterfaceListFieldWithPointerTopicChildrenContent() {
}

// GetTypename is a part of, and documented with, the interface InterfaceListFieldWithPointerTopicChildrenContent.
func (v *InterfaceListFieldWithPointerTopicChildrenTopic) GetTypename() string { return v.Typename }

// GetId is a part of, and documented with, the interface InterfaceListFieldWithPointerTopicChildrenContent.
func (v *InterfaceListFieldWithPointerTopicChildrenTopic) GetId() testutil.ID { return v.Id }

// GetName is a part of, and documented with, the interface InterfaceListFieldWithPointerTopicChildrenContent.
func (v *InterfaceListFieldWithPointerTopicChildrenTopic) GetName() string { return v.Name }

func __unmarshalInterfaceListFieldWithPointerTopicChildrenContent(b []byte, v *InterfaceListFieldWithPointerTopicChildrenContent) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Article":
		*v = new(InterfaceListFieldWithPointerTopicChildrenArticle)
		return json.Unmarshal(b, *v)
	case "Video":
		*v = new(InterfaceListFieldWithPointerTopicChildrenVideo)
		return json.Unmarshal(b, *v)
	case "Topic":
		*v = new(InterfaceListFieldWithPointerTopicChildrenTopic)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"Response was missing Content.__typename")
	default:
		return fmt.Errorf(
			`Unexpected concrete type for InterfaceListFieldWithPointerTopicChildrenContent: "%v"`, tn.TypeName)
	}
}

// InterfaceListFieldWithPointerTopicChildrenTopic includes the requested fields of the GraphQL type Topic.
type InterfaceListFieldWithPointerTopicChildrenTopic struct {
	Typename string `json:"__typename"`
	// ID is the identifier of the content.
	Id   testutil.ID `json:"id"`
	Name string      `json:"name"`
}

// InterfaceListFieldWithPointerTopicChildrenVideo includes the requested fields of the GraphQL type Video.
type InterfaceListFieldWithPointerTopicChildrenVideo struct {
	Typename string `json:"__typename"`
	// ID is the identifier of the content.
	Id   testutil.ID `json:"id"`
	Name string      `json:"name"`
}

func InterfaceListField(
	client graphql.Client,
) (*InterfaceListFieldResponse, error) {
	var err error

	var retval InterfaceListFieldResponse
	err = client.MakeRequest(
		nil,
		"InterfaceListField",
		`
query InterfaceListField {
	root {
		id
		name
		children {
			__typename
			id
			name
		}
	}
	withPointer: root {
		id
		name
		children {
			__typename
			id
			name
		}
	}
}
`,
		&retval,
		nil,
	)
	return &retval, err
}

