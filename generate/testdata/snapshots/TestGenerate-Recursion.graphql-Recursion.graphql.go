package test

// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

import (
	"github.com/Khan/genqlient/graphql"
	"github.com/Khan/genqlient/internal/testutil"
)

// RecursionRecurRecursive includes the requested fields of the GraphQL type Recursive.
type RecursionRecurRecursive struct {
	Rec RecursionRecurRecursiveRecRecursive `json:"rec"`
}

// RecursionRecurRecursiveRecRecursive includes the requested fields of the GraphQL type Recursive.
type RecursionRecurRecursiveRecRecursive struct {
	Rec RecursionRecurRecursiveRecRecursiveRecRecursive `json:"rec"`
}

// RecursionRecurRecursiveRecRecursiveRecRecursive includes the requested fields of the GraphQL type Recursive.
type RecursionRecurRecursiveRecRecursiveRecRecursive struct {
	Rec RecursionRecurRecursiveRecRecursiveRecRecursiveRecRecursive `json:"rec"`
}

// RecursionRecurRecursiveRecRecursiveRecRecursiveRecRecursive includes the requested fields of the GraphQL type Recursive.
type RecursionRecurRecursiveRecRecursiveRecRecursiveRecRecursive struct {
	Id testutil.ID `json:"id"`
}

// RecursionResponse is returned by Recursion on success.
type RecursionResponse struct {
	Recur RecursionRecurRecursive `json:"recur"`
}

type RecursiveInput struct {
	Rec []RecursiveInput `json:"rec"`
}

// __RecursionInput is used internally by genqlient
type __RecursionInput struct {
	Input RecursiveInput `json:"input"`
}

func Recursion(
	client graphql.Client,
	input RecursiveInput,
) (*RecursionResponse, error) {
	__input := __RecursionInput{
		Input: input,
	}
	var err error

	var retval RecursionResponse
	err = client.MakeRequest(
		nil,
		"Recursion",
		`
query Recursion ($input: RecursiveInput!) {
	recur(input: $input) {
		rec {
			rec {
				rec {
					id
				}
			}
		}
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

