// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package test

import (
	"github.com/Khan/genqlient/graphql"
	"github.com/Khan/genqlient/internal/testutil"
)

// SnakeCaseNestedObjectObjectType includes the requested fields of the GraphQL type ObjectType.
type SnakeCaseNestedObjectObjectType struct {
	Snake_case_field SnakeCaseNestedObjectObjectTypeSnake_case_fieldSnake_case_type `json:"snake_case_field"`
}

// GetSnake_case_field returns SnakeCaseNestedObjectObjectType.Snake_case_field, and is useful for accessing the field via an interface.
func (v *SnakeCaseNestedObjectObjectType) GetSnake_case_field() SnakeCaseNestedObjectObjectTypeSnake_case_fieldSnake_case_type {
	return v.Snake_case_field
}

// SnakeCaseNestedObjectObjectTypeSnake_case_fieldSnake_case_type includes the requested fields of the GraphQL type snake_case_type.
type SnakeCaseNestedObjectObjectTypeSnake_case_fieldSnake_case_type struct {
	Id   testutil.ID `json:"id"`
	Name string      `json:"name"`
}

// GetId returns SnakeCaseNestedObjectObjectTypeSnake_case_fieldSnake_case_type.Id, and is useful for accessing the field via an interface.
func (v *SnakeCaseNestedObjectObjectTypeSnake_case_fieldSnake_case_type) GetId() testutil.ID {
	return v.Id
}

// GetName returns SnakeCaseNestedObjectObjectTypeSnake_case_fieldSnake_case_type.Name, and is useful for accessing the field via an interface.
func (v *SnakeCaseNestedObjectObjectTypeSnake_case_fieldSnake_case_type) GetName() string {
	return v.Name
}

// SnakeCaseNestedResponse is returned by SnakeCaseNested on success.
type SnakeCaseNestedResponse struct {
	Object SnakeCaseNestedObjectObjectType `json:"object"`
}

// GetObject returns SnakeCaseNestedResponse.Object, and is useful for accessing the field via an interface.
func (v *SnakeCaseNestedResponse) GetObject() SnakeCaseNestedObjectObjectType { return v.Object }

// The query executed by SnakeCaseNested.
const SnakeCaseNested_Operation = `
query SnakeCaseNested {
	object {
		snake_case_field {
			id
			name
		}
	}
}
`

func SnakeCaseNested(
	client_ graphql.Client,
) (data_ *SnakeCaseNestedResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SnakeCaseNested",
		Query:  SnakeCaseNested_Operation,
	}

	data_ = &SnakeCaseNestedResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		nil,
		req_,
		resp_,
	)

	return data_, err_
}

