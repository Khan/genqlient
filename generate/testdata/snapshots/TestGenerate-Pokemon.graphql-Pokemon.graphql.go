package test

// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

import (
	"github.com/Khan/genqlient/graphql"
	"github.com/Khan/genqlient/internal/testutil"
)

// GetPokemonSiblingsResponse is returned by GetPokemonSiblings on success.
type GetPokemonSiblingsResponse struct {
	// user looks up a user by some stuff.
	//
	// See UserQueryInput for what stuff is supported.
	// If query is null, returns the current user.
	User GetPokemonSiblingsUser `json:"user"`
}

// GetPokemonSiblingsUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A User is a user!
type GetPokemonSiblingsUser struct {
	// id is the user's ID.
	//
	// It is stable, unique, and opaque, like all good IDs.
	Id               string                                   `json:"id"`
	Roles            []string                                 `json:"roles"`
	Name             string                                   `json:"name"`
	Pokemon          []testutil.Pokemon                       `json:"pokemon"`
	GenqlientPokemon []GetPokemonSiblingsUserGenqlientPokemon `json:"genqlientPokemon"`
}

// GetPokemonSiblingsUserGenqlientPokemon includes the requested fields of the GraphQL type Pokemon.
type GetPokemonSiblingsUserGenqlientPokemon struct {
	Species string `json:"species"`
	Level   int    `json:"level"`
}

func GetPokemonSiblings(
	client graphql.Client,
	input testutil.Pokemon,
) (*GetPokemonSiblingsResponse, error) {
	variables := map[string]interface{}{
		"input": input,
	}

	var err error

	var retval GetPokemonSiblingsResponse
	err = client.MakeRequest(
		nil,
		"GetPokemonSiblings",
		`
query GetPokemonSiblings ($input: PokemonInput!) {
	user(query: {hasPokemon:$input}) {
		id
		roles
		name
		pokemon {
			species
			level
		}
		genqlientPokemon: pokemon {
			species
			level
		}
	}
}
`,
		&retval,
		variables,
	)
	return &retval, err
}

