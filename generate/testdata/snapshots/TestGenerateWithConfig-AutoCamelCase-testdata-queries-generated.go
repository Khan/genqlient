// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package queries

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// SnakeCaseFieldsResponse is returned by SnakeCaseFields on success.
type SnakeCaseFieldsResponse struct {
	// user looks up a user by some stuff.
	//
	// See UserQueryInput for what stuff is supported.
	// If query is null, returns the current user.
	User SnakeCaseFieldsUser `json:"user"`
}

// GetUser returns SnakeCaseFieldsResponse.User, and is useful for accessing the field via an interface.
func (v *SnakeCaseFieldsResponse) GetUser() SnakeCaseFieldsUser { return v.User }

// SnakeCaseFieldsUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A User is a user!
type SnakeCaseFieldsUser struct {
	UserId      string `json:"user_id"`
	DisplayName string `json:"display_name"`
}

// GetUserId returns SnakeCaseFieldsUser.UserId, and is useful for accessing the field via an interface.
func (v *SnakeCaseFieldsUser) GetUserId() string { return v.UserId }

// GetDisplayName returns SnakeCaseFieldsUser.DisplayName, and is useful for accessing the field via an interface.
func (v *SnakeCaseFieldsUser) GetDisplayName() string { return v.DisplayName }

// The query executed by SnakeCaseFields.
const SnakeCaseFields_Operation = `
query SnakeCaseFields {
	user {
		user_id
		display_name
	}
}
`

func SnakeCaseFields(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *SnakeCaseFieldsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SnakeCaseFields",
		Query:  SnakeCaseFields_Operation,
	}

	data_ = &SnakeCaseFieldsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

