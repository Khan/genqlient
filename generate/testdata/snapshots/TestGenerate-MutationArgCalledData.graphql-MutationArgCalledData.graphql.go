// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package test

import (
	"github.com/Khan/genqlient/graphql"
	"github.com/Khan/genqlient/internal/testutil"
)

// MutationWithDataArgResponse is returned by MutationWithDataArg on success.
type MutationWithDataArgResponse struct {
	UpdateUser MutationWithDataArgUpdateUser `json:"updateUser"`
}

// GetUpdateUser returns MutationWithDataArgResponse.UpdateUser, and is useful for accessing the field via an interface.
func (v *MutationWithDataArgResponse) GetUpdateUser() MutationWithDataArgUpdateUser {
	return v.UpdateUser
}

// MutationWithDataArgUpdateUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A User is a user!
type MutationWithDataArgUpdateUser struct {
	// id is the user's ID.
	//
	// It is stable, unique, and opaque, like all good IDs.
	Id testutil.ID `json:"id"`
}

// GetId returns MutationWithDataArgUpdateUser.Id, and is useful for accessing the field via an interface.
func (v *MutationWithDataArgUpdateUser) GetId() testutil.ID { return v.Id }

// __MutationWithDataArgInput is used internally by genqlient
type __MutationWithDataArgInput struct {
	Data string `json:"data"`
}

// GetData returns __MutationWithDataArgInput.Data, and is useful for accessing the field via an interface.
func (v *__MutationWithDataArgInput) GetData() string { return v.Data }

// The query or mutation executed by MutationWithDataArg.
const MutationWithDataArg_Operation = `
mutation MutationWithDataArg ($data: String!) {
	updateUser(data: $data) {
		id
	}
}
`

func MutationWithDataArg(
	client graphql.Client,
	data string,
) (*MutationWithDataArgResponse, error) {
	req := &graphql.Request{
		OpName: "MutationWithDataArg",
		Query:  MutationWithDataArg_Operation,
		Variables: &__MutationWithDataArgInput{
			Data: data,
		},
	}
	var err_ error

	var data_ MutationWithDataArgResponse
	resp := &graphql.Response{Data: &data_}

	err_ = client.MakeRequest(
		nil,
		req,
		resp,
	)

	return &data_, err_
}

