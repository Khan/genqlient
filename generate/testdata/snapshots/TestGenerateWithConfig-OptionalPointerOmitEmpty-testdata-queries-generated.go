// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package queries

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/Khan/genqlient/internal/testutil"
)

// InputObjectQueryResponse is returned by InputObjectQuery on success.
type InputObjectQueryResponse struct {
	// user looks up a user by some stuff.
	//
	// See UserQueryInput for what stuff is supported.
	// If query is null, returns the current user.
	User *InputObjectQueryUser `json:"user"`
}

// GetUser returns InputObjectQueryResponse.User, and is useful for accessing the field via an interface.
func (v *InputObjectQueryResponse) GetUser() *InputObjectQueryUser { return v.User }

// InputObjectQueryUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A User is a user!
type InputObjectQueryUser struct {
	// id is the user's ID.
	//
	// It is stable, unique, and opaque, like all good IDs.
	Id string `json:"id"`
}

// GetId returns InputObjectQueryUser.Id, and is useful for accessing the field via an interface.
func (v *InputObjectQueryUser) GetId() string { return v.Id }

// ListInputQueryResponse is returned by ListInputQuery on success.
type ListInputQueryResponse struct {
	// user looks up a user by some stuff.
	//
	// See UserQueryInput for what stuff is supported.
	// If query is null, returns the current user.
	User *ListInputQueryUser `json:"user"`
}

// GetUser returns ListInputQueryResponse.User, and is useful for accessing the field via an interface.
func (v *ListInputQueryResponse) GetUser() *ListInputQueryUser { return v.User }

// ListInputQueryUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A User is a user!
type ListInputQueryUser struct {
	// id is the user's ID.
	//
	// It is stable, unique, and opaque, like all good IDs.
	Id string `json:"id"`
}

// GetId returns ListInputQueryUser.Id, and is useful for accessing the field via an interface.
func (v *ListInputQueryUser) GetId() string { return v.Id }

// OmitEmptyQueryResponse is returned by OmitEmptyQuery on success.
type OmitEmptyQueryResponse struct {
	// user looks up a user by some stuff.
	//
	// See UserQueryInput for what stuff is supported.
	// If query is null, returns the current user.
	User         *OmitEmptyQueryUser        `json:"user"`
	Users        []*OmitEmptyQueryUsersUser `json:"users"`
	MaybeConvert *time.Time                 `json:"-"`
	Convert2     *time.Time                 `json:"-"`
}

// GetUser returns OmitEmptyQueryResponse.User, and is useful for accessing the field via an interface.
func (v *OmitEmptyQueryResponse) GetUser() *OmitEmptyQueryUser { return v.User }

// GetUsers returns OmitEmptyQueryResponse.Users, and is useful for accessing the field via an interface.
func (v *OmitEmptyQueryResponse) GetUsers() []*OmitEmptyQueryUsersUser { return v.Users }

// GetMaybeConvert returns OmitEmptyQueryResponse.MaybeConvert, and is useful for accessing the field via an interface.
func (v *OmitEmptyQueryResponse) GetMaybeConvert() *time.Time { return v.MaybeConvert }

// GetConvert2 returns OmitEmptyQueryResponse.Convert2, and is useful for accessing the field via an interface.
func (v *OmitEmptyQueryResponse) GetConvert2() *time.Time { return v.Convert2 }

func (v *OmitEmptyQueryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*OmitEmptyQueryResponse
		MaybeConvert json.RawMessage `json:"maybeConvert"`
		Convert2     json.RawMessage `json:"convert2"`
		graphql.NoUnmarshalJSON
	}
	firstPass.OmitEmptyQueryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.MaybeConvert
		src := firstPass.MaybeConvert
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = testutil.UnmarshalDate(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal OmitEmptyQueryResponse.MaybeConvert: %w", err)
			}
		}
	}

	{
		dst := &v.Convert2
		src := firstPass.Convert2
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = testutil.UnmarshalDate(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal OmitEmptyQueryResponse.Convert2: %w", err)
			}
		}
	}
	return nil
}

type __premarshalOmitEmptyQueryResponse struct {
	User *OmitEmptyQueryUser `json:"user"`

	Users []*OmitEmptyQueryUsersUser `json:"users"`

	MaybeConvert json.RawMessage `json:"maybeConvert"`

	Convert2 json.RawMessage `json:"convert2"`
}

func (v *OmitEmptyQueryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *OmitEmptyQueryResponse) __premarshalJSON() (*__premarshalOmitEmptyQueryResponse, error) {
	var retval __premarshalOmitEmptyQueryResponse

	retval.User = v.User
	retval.Users = v.Users
	{

		dst := &retval.MaybeConvert
		src := v.MaybeConvert
		if src != nil {
			var err error
			*dst, err = testutil.MarshalDate(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal OmitEmptyQueryResponse.MaybeConvert: %w", err)
			}
		}
	}
	{

		dst := &retval.Convert2
		src := v.Convert2
		if src != nil {
			var err error
			*dst, err = testutil.MarshalDate(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal OmitEmptyQueryResponse.Convert2: %w", err)
			}
		}
	}
	return &retval, nil
}

// OmitEmptyQueryUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A User is a user!
type OmitEmptyQueryUser struct {
	// id is the user's ID.
	//
	// It is stable, unique, and opaque, like all good IDs.
	Id string `json:"id"`
}

// GetId returns OmitEmptyQueryUser.Id, and is useful for accessing the field via an interface.
func (v *OmitEmptyQueryUser) GetId() string { return v.Id }

// OmitEmptyQueryUsersUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A User is a user!
type OmitEmptyQueryUsersUser struct {
	// id is the user's ID.
	//
	// It is stable, unique, and opaque, like all good IDs.
	Id string `json:"id"`
}

// GetId returns OmitEmptyQueryUsersUser.Id, and is useful for accessing the field via an interface.
func (v *OmitEmptyQueryUsersUser) GetId() string { return v.Id }

// PointersOmitEmptyQueryOtherUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A User is a user!
type PointersOmitEmptyQueryOtherUser struct {
	// id is the user's ID.
	//
	// It is stable, unique, and opaque, like all good IDs.
	Id string `json:"id"`
}

// GetId returns PointersOmitEmptyQueryOtherUser.Id, and is useful for accessing the field via an interface.
func (v *PointersOmitEmptyQueryOtherUser) GetId() string { return v.Id }

// PointersOmitEmptyQueryResponse is returned by PointersOmitEmptyQuery on success.
type PointersOmitEmptyQueryResponse struct {
	// user looks up a user by some stuff.
	//
	// See UserQueryInput for what stuff is supported.
	// If query is null, returns the current user.
	User *PointersOmitEmptyQueryUser `json:"user"`
	// user looks up a user by some stuff.
	//
	// See UserQueryInput for what stuff is supported.
	// If query is null, returns the current user.
	OtherUser    *PointersOmitEmptyQueryOtherUser `json:"otherUser"`
	MaybeConvert *time.Time                       `json:"-"`
}

// GetUser returns PointersOmitEmptyQueryResponse.User, and is useful for accessing the field via an interface.
func (v *PointersOmitEmptyQueryResponse) GetUser() *PointersOmitEmptyQueryUser { return v.User }

// GetOtherUser returns PointersOmitEmptyQueryResponse.OtherUser, and is useful for accessing the field via an interface.
func (v *PointersOmitEmptyQueryResponse) GetOtherUser() *PointersOmitEmptyQueryOtherUser {
	return v.OtherUser
}

// GetMaybeConvert returns PointersOmitEmptyQueryResponse.MaybeConvert, and is useful for accessing the field via an interface.
func (v *PointersOmitEmptyQueryResponse) GetMaybeConvert() *time.Time { return v.MaybeConvert }

func (v *PointersOmitEmptyQueryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PointersOmitEmptyQueryResponse
		MaybeConvert json.RawMessage `json:"maybeConvert"`
		graphql.NoUnmarshalJSON
	}
	firstPass.PointersOmitEmptyQueryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.MaybeConvert
		src := firstPass.MaybeConvert
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = testutil.UnmarshalDate(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal PointersOmitEmptyQueryResponse.MaybeConvert: %w", err)
			}
		}
	}
	return nil
}

type __premarshalPointersOmitEmptyQueryResponse struct {
	User *PointersOmitEmptyQueryUser `json:"user"`

	OtherUser *PointersOmitEmptyQueryOtherUser `json:"otherUser"`

	MaybeConvert json.RawMessage `json:"maybeConvert"`
}

func (v *PointersOmitEmptyQueryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PointersOmitEmptyQueryResponse) __premarshalJSON() (*__premarshalPointersOmitEmptyQueryResponse, error) {
	var retval __premarshalPointersOmitEmptyQueryResponse

	retval.User = v.User
	retval.OtherUser = v.OtherUser
	{

		dst := &retval.MaybeConvert
		src := v.MaybeConvert
		if src != nil {
			var err error
			*dst, err = testutil.MarshalDate(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal PointersOmitEmptyQueryResponse.MaybeConvert: %w", err)
			}
		}
	}
	return &retval, nil
}

// PointersOmitEmptyQueryUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A User is a user!
type PointersOmitEmptyQueryUser struct {
	// id is the user's ID.
	//
	// It is stable, unique, and opaque, like all good IDs.
	Id          *string  `json:"id"`
	Roles       []Role   `json:"roles"`
	Name        *string  `json:"name"`
	Emails      []string `json:"emails"`
	EmailsNoPtr []string `json:"emailsNoPtr"`
}

// GetId returns PointersOmitEmptyQueryUser.Id, and is useful for accessing the field via an interface.
func (v *PointersOmitEmptyQueryUser) GetId() *string { return v.Id }

// GetRoles returns PointersOmitEmptyQueryUser.Roles, and is useful for accessing the field via an interface.
func (v *PointersOmitEmptyQueryUser) GetRoles() []Role { return v.Roles }

// GetName returns PointersOmitEmptyQueryUser.Name, and is useful for accessing the field via an interface.
func (v *PointersOmitEmptyQueryUser) GetName() *string { return v.Name }

// GetEmails returns PointersOmitEmptyQueryUser.Emails, and is useful for accessing the field via an interface.
func (v *PointersOmitEmptyQueryUser) GetEmails() []string { return v.Emails }

// GetEmailsNoPtr returns PointersOmitEmptyQueryUser.EmailsNoPtr, and is useful for accessing the field via an interface.
func (v *PointersOmitEmptyQueryUser) GetEmailsNoPtr() []string { return v.EmailsNoPtr }

type PokemonInput struct {
	Species string `json:"species"`
	Level   int    `json:"level"`
}

// GetSpecies returns PokemonInput.Species, and is useful for accessing the field via an interface.
func (v *PokemonInput) GetSpecies() string { return v.Species }

// GetLevel returns PokemonInput.Level, and is useful for accessing the field via an interface.
func (v *PokemonInput) GetLevel() int { return v.Level }

// Role is a type a user may have.
type Role string

const (
	// What is a student?
	//
	// A student is primarily a person enrolled in a school or other educational institution and who is under learning with goals of acquiring knowledge, developing professions and achieving employment at desired field. In the broader sense, a student is anyone who applies themselves to the intensive intellectual engagement with some matter necessary to master it as part of some practical affair in which such mastery is basic or decisive.
	//
	// (from [Wikipedia](https://en.wikipedia.org/wiki/Student))
	RoleStudent Role = "STUDENT"
	// Teacher is a teacher, who teaches the students.
	RoleTeacher Role = "TEACHER"
)

var AllRole = []Role{
	RoleStudent,
	RoleTeacher,
}

// UserQueryInput is the argument to Query.users.
//
// Ideally this would support anything and everything!
// Or maybe ideally it wouldn't.
// Really I'm just talking to make this documentation longer.
type UserQueryInput struct {
	Email *string `json:"email,omitempty"`
	Name  *string `json:"name,omitempty"`
	// id looks the user up by ID.  It's a great way to look up users.
	Id         *string       `json:"id,omitempty"`
	Role       *Role         `json:"role,omitempty"`
	Names      []*string     `json:"names,omitempty"`
	HasPokemon *PokemonInput `json:"hasPokemon,omitempty"`
	Birthdate  *time.Time    `json:"-"`
}

// GetEmail returns UserQueryInput.Email, and is useful for accessing the field via an interface.
func (v *UserQueryInput) GetEmail() *string { return v.Email }

// GetName returns UserQueryInput.Name, and is useful for accessing the field via an interface.
func (v *UserQueryInput) GetName() *string { return v.Name }

// GetId returns UserQueryInput.Id, and is useful for accessing the field via an interface.
func (v *UserQueryInput) GetId() *string { return v.Id }

// GetRole returns UserQueryInput.Role, and is useful for accessing the field via an interface.
func (v *UserQueryInput) GetRole() *Role { return v.Role }

// GetNames returns UserQueryInput.Names, and is useful for accessing the field via an interface.
func (v *UserQueryInput) GetNames() []*string { return v.Names }

// GetHasPokemon returns UserQueryInput.HasPokemon, and is useful for accessing the field via an interface.
func (v *UserQueryInput) GetHasPokemon() *PokemonInput { return v.HasPokemon }

// GetBirthdate returns UserQueryInput.Birthdate, and is useful for accessing the field via an interface.
func (v *UserQueryInput) GetBirthdate() *time.Time { return v.Birthdate }

func (v *UserQueryInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserQueryInput
		Birthdate json.RawMessage `json:"birthdate"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UserQueryInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Birthdate
		src := firstPass.Birthdate
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = testutil.UnmarshalDate(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal UserQueryInput.Birthdate: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUserQueryInput struct {
	Email *string `json:"email,omitempty"`

	Name *string `json:"name,omitempty"`

	Id *string `json:"id,omitempty"`

	Role *Role `json:"role,omitempty"`

	Names []*string `json:"names,omitempty"`

	HasPokemon *PokemonInput `json:"hasPokemon,omitempty"`

	Birthdate json.RawMessage `json:"birthdate,omitempty"`
}

func (v *UserQueryInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserQueryInput) __premarshalJSON() (*__premarshalUserQueryInput, error) {
	var retval __premarshalUserQueryInput

	retval.Email = v.Email
	retval.Name = v.Name
	retval.Id = v.Id
	retval.Role = v.Role
	retval.Names = v.Names
	retval.HasPokemon = v.HasPokemon
	{

		dst := &retval.Birthdate
		src := v.Birthdate
		if src != nil {
			var err error
			*dst, err = testutil.MarshalDate(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal UserQueryInput.Birthdate: %w", err)
			}
		}
	}
	return &retval, nil
}

// __InputObjectQueryInput is used internally by genqlient
type __InputObjectQueryInput struct {
	Query *UserQueryInput `json:"query,omitempty"`
}

// GetQuery returns __InputObjectQueryInput.Query, and is useful for accessing the field via an interface.
func (v *__InputObjectQueryInput) GetQuery() *UserQueryInput { return v.Query }

// __ListInputQueryInput is used internally by genqlient
type __ListInputQueryInput struct {
	Names []*string `json:"names,omitempty"`
}

// GetNames returns __ListInputQueryInput.Names, and is useful for accessing the field via an interface.
func (v *__ListInputQueryInput) GetNames() []*string { return v.Names }

// __OmitEmptyQueryInput is used internally by genqlient
type __OmitEmptyQueryInput struct {
	Query         *UserQueryInput   `json:"query,omitempty"`
	Queries       []*UserQueryInput `json:"queries,omitempty"`
	Dt            *time.Time        `json:"-"`
	Tz            *string           `json:"tz,omitempty"`
	TzNoOmitEmpty *string           `json:"tzNoOmitEmpty"`
}

// GetQuery returns __OmitEmptyQueryInput.Query, and is useful for accessing the field via an interface.
func (v *__OmitEmptyQueryInput) GetQuery() *UserQueryInput { return v.Query }

// GetQueries returns __OmitEmptyQueryInput.Queries, and is useful for accessing the field via an interface.
func (v *__OmitEmptyQueryInput) GetQueries() []*UserQueryInput { return v.Queries }

// GetDt returns __OmitEmptyQueryInput.Dt, and is useful for accessing the field via an interface.
func (v *__OmitEmptyQueryInput) GetDt() *time.Time { return v.Dt }

// GetTz returns __OmitEmptyQueryInput.Tz, and is useful for accessing the field via an interface.
func (v *__OmitEmptyQueryInput) GetTz() *string { return v.Tz }

// GetTzNoOmitEmpty returns __OmitEmptyQueryInput.TzNoOmitEmpty, and is useful for accessing the field via an interface.
func (v *__OmitEmptyQueryInput) GetTzNoOmitEmpty() *string { return v.TzNoOmitEmpty }

func (v *__OmitEmptyQueryInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__OmitEmptyQueryInput
		Dt json.RawMessage `json:"dt"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__OmitEmptyQueryInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Dt
		src := firstPass.Dt
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = testutil.UnmarshalDate(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __OmitEmptyQueryInput.Dt: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__OmitEmptyQueryInput struct {
	Query *UserQueryInput `json:"query,omitempty"`

	Queries []*UserQueryInput `json:"queries,omitempty"`

	Dt json.RawMessage `json:"dt,omitempty"`

	Tz *string `json:"tz,omitempty"`

	TzNoOmitEmpty *string `json:"tzNoOmitEmpty"`
}

func (v *__OmitEmptyQueryInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__OmitEmptyQueryInput) __premarshalJSON() (*__premarshal__OmitEmptyQueryInput, error) {
	var retval __premarshal__OmitEmptyQueryInput

	retval.Query = v.Query
	retval.Queries = v.Queries
	{

		dst := &retval.Dt
		src := v.Dt
		if src != nil {
			var err error
			*dst, err = testutil.MarshalDate(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal __OmitEmptyQueryInput.Dt: %w", err)
			}
		}
	}
	retval.Tz = v.Tz
	retval.TzNoOmitEmpty = v.TzNoOmitEmpty
	return &retval, nil
}

// __PointersOmitEmptyQueryInput is used internally by genqlient
type __PointersOmitEmptyQueryInput struct {
	Query *UserQueryInput `json:"query,omitempty"`
	Dt    *time.Time      `json:"-"`
	Tz    string          `json:"tz,omitempty"`
}

// GetQuery returns __PointersOmitEmptyQueryInput.Query, and is useful for accessing the field via an interface.
func (v *__PointersOmitEmptyQueryInput) GetQuery() *UserQueryInput { return v.Query }

// GetDt returns __PointersOmitEmptyQueryInput.Dt, and is useful for accessing the field via an interface.
func (v *__PointersOmitEmptyQueryInput) GetDt() *time.Time { return v.Dt }

// GetTz returns __PointersOmitEmptyQueryInput.Tz, and is useful for accessing the field via an interface.
func (v *__PointersOmitEmptyQueryInput) GetTz() string { return v.Tz }

func (v *__PointersOmitEmptyQueryInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__PointersOmitEmptyQueryInput
		Dt json.RawMessage `json:"dt"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__PointersOmitEmptyQueryInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Dt
		src := firstPass.Dt
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = testutil.UnmarshalDate(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __PointersOmitEmptyQueryInput.Dt: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__PointersOmitEmptyQueryInput struct {
	Query *UserQueryInput `json:"query,omitempty"`

	Dt json.RawMessage `json:"dt,omitempty"`

	Tz string `json:"tz,omitempty"`
}

func (v *__PointersOmitEmptyQueryInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__PointersOmitEmptyQueryInput) __premarshalJSON() (*__premarshal__PointersOmitEmptyQueryInput, error) {
	var retval __premarshal__PointersOmitEmptyQueryInput

	retval.Query = v.Query
	{

		dst := &retval.Dt
		src := v.Dt
		if src != nil {
			var err error
			*dst, err = testutil.MarshalDate(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal __PointersOmitEmptyQueryInput.Dt: %w", err)
			}
		}
	}
	retval.Tz = v.Tz
	return &retval, nil
}

// The query executed by InputObjectQuery.
const InputObjectQuery_Operation = `
query InputObjectQuery ($query: UserQueryInput) {
	user(query: $query) {
		id
	}
}
`

func InputObjectQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	query *UserQueryInput,
) (data_ *InputObjectQueryResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "InputObjectQuery",
		Query:  InputObjectQuery_Operation,
		Variables: &__InputObjectQueryInput{
			Query: query,
		},
	}

	data_ = &InputObjectQueryResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListInputQuery.
const ListInputQuery_Operation = `
query ListInputQuery ($names: [String]) {
	user(query: {names:$names}) {
		id
	}
}
`

func ListInputQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	names []*string,
) (data_ *ListInputQueryResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListInputQuery",
		Query:  ListInputQuery_Operation,
		Variables: &__ListInputQueryInput{
			Names: names,
		},
	}

	data_ = &ListInputQueryResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by OmitEmptyQuery.
const OmitEmptyQuery_Operation = `
query OmitEmptyQuery ($query: UserQueryInput, $queries: [UserQueryInput], $dt: DateTime, $tz: String, $tzNoOmitEmpty: String) {
	user(query: $query) {
		id
	}
	users(query: $queries) {
		id
	}
	maybeConvert(dt: $dt, tz: $tz)
	convert2: maybeConvert(dt: $dt, tz: $tzNoOmitEmpty)
}
`

func OmitEmptyQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	query *UserQueryInput,
	queries []*UserQueryInput,
	dt *time.Time,
	tz *string,
	tzNoOmitEmpty *string,
) (data_ *OmitEmptyQueryResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "OmitEmptyQuery",
		Query:  OmitEmptyQuery_Operation,
		Variables: &__OmitEmptyQueryInput{
			Query:         query,
			Queries:       queries,
			Dt:            dt,
			Tz:            tz,
			TzNoOmitEmpty: tzNoOmitEmpty,
		},
	}

	data_ = &OmitEmptyQueryResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by PointersOmitEmptyQuery.
const PointersOmitEmptyQuery_Operation = `
query PointersOmitEmptyQuery ($query: UserQueryInput, $dt: DateTime, $tz: String) {
	user(query: $query) {
		id
		roles
		name
		emails
		emailsNoPtr: emails
	}
	otherUser: user(query: $query) {
		id
	}
	maybeConvert(dt: $dt, tz: $tz)
}
`

func PointersOmitEmptyQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	query *UserQueryInput,
	dt *time.Time,
	tz string,
) (data_ *PointersOmitEmptyQueryResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "PointersOmitEmptyQuery",
		Query:  PointersOmitEmptyQuery_Operation,
		Variables: &__PointersOmitEmptyQueryInput{
			Query: query,
			Dt:    dt,
			Tz:    tz,
		},
	}

	data_ = &PointersOmitEmptyQueryResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

