// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package test

import (
	"github.com/Khan/genqlient/graphql"
	"github.com/Khan/genqlient/internal/testutil"
)

// SimpleMutationCreateUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A User is a user!
type SimpleMutationCreateUser struct {
	// id is the user's ID.
	//
	// It is stable, unique, and opaque, like all good IDs.
	Id   testutil.ID `json:"id"`
	Name string      `json:"name"`
}

// GetId returns SimpleMutationCreateUser.Id, and is useful for accessing the field via an interface.
func (v *SimpleMutationCreateUser) GetId() testutil.ID { return v.Id }

// GetName returns SimpleMutationCreateUser.Name, and is useful for accessing the field via an interface.
func (v *SimpleMutationCreateUser) GetName() string { return v.Name }

// SimpleMutationResponse is returned by SimpleMutation on success.
type SimpleMutationResponse struct {
	CreateUser SimpleMutationCreateUser `json:"createUser"`
}

// GetCreateUser returns SimpleMutationResponse.CreateUser, and is useful for accessing the field via an interface.
func (v *SimpleMutationResponse) GetCreateUser() SimpleMutationCreateUser { return v.CreateUser }

// __SimpleMutationInput is used internally by genqlient
type __SimpleMutationInput struct {
	Name string `json:"name"`
}

// GetName returns __SimpleMutationInput.Name, and is useful for accessing the field via an interface.
func (v *__SimpleMutationInput) GetName() string { return v.Name }

// The mutation executed by SimpleMutation.
const SimpleMutation_Operation = `
mutation SimpleMutation ($name: String!) {
	createUser(name: $name) {
		id
		name
	}
}
`

// SimpleMutation creates a user.
//
// It has a long doc-comment, to test that we handle that correctly.
// What a long comment indeed.
func SimpleMutation(
	client_ graphql.Client,
	name string,
) (data_ *SimpleMutationResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SimpleMutation",
		Query:  SimpleMutation_Operation,
		Variables: &__SimpleMutationInput{
			Name: name,
		},
	}

	data_ = &SimpleMutationResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		nil,
		req_,
		resp_,
	)

	return data_, err_
}

