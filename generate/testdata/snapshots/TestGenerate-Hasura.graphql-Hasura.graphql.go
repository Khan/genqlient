// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package test

import (
	"github.com/Khan/genqlient/graphql"
	"github.com/Khan/genqlient/internal/testutil"
)

type GetPokemonBoolExp struct {
	And   []*GetPokemonBoolExp `json:"_and"`
	Not   *GetPokemonBoolExp   `json:"_not"`
	Or    []*GetPokemonBoolExp `json:"_or"`
	Level *IntComparisonExp    `json:"level"`
}

// GetAnd returns GetPokemonBoolExp.And, and is useful for accessing the field via an interface.
func (v *GetPokemonBoolExp) GetAnd() (val []*GetPokemonBoolExp) {
	if v == nil {
		return
	}
	return v.And
}

// GetNot returns GetPokemonBoolExp.Not, and is useful for accessing the field via an interface.
func (v *GetPokemonBoolExp) GetNot() (val *GetPokemonBoolExp) {
	if v == nil {
		return
	}
	return v.Not
}

// GetOr returns GetPokemonBoolExp.Or, and is useful for accessing the field via an interface.
func (v *GetPokemonBoolExp) GetOr() (val []*GetPokemonBoolExp) {
	if v == nil {
		return
	}
	return v.Or
}

// GetLevel returns GetPokemonBoolExp.Level, and is useful for accessing the field via an interface.
func (v *GetPokemonBoolExp) GetLevel() (val *IntComparisonExp) {
	if v == nil {
		return
	}
	return v.Level
}

// GetPokemonResponse is returned by GetPokemon on success.
type GetPokemonResponse struct {
	GetPokemon []*testutil.Pokemon `json:"getPokemon"`
}

// GetGetPokemon returns GetPokemonResponse.GetPokemon, and is useful for accessing the field via an interface.
func (v *GetPokemonResponse) GetGetPokemon() (val []*testutil.Pokemon) {
	if v == nil {
		return
	}
	return v.GetPokemon
}

type IntComparisonExp struct {
	Eq     *int   `json:"_eq"`
	Gt     *int   `json:"_gt"`
	Gte    *int   `json:"_gte"`
	In     []*int `json:"_in"`
	IsNull *bool  `json:"_isNull"`
	Lt     *int   `json:"_lt"`
	Lte    *int   `json:"_lte"`
	Neq    *int   `json:"_neq"`
	Nin    []*int `json:"_nin"`
}

// GetEq returns IntComparisonExp.Eq, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetEq() (val *int) {
	if v == nil {
		return
	}
	return v.Eq
}

// GetGt returns IntComparisonExp.Gt, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetGt() (val *int) {
	if v == nil {
		return
	}
	return v.Gt
}

// GetGte returns IntComparisonExp.Gte, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetGte() (val *int) {
	if v == nil {
		return
	}
	return v.Gte
}

// GetIn returns IntComparisonExp.In, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetIn() (val []*int) {
	if v == nil {
		return
	}
	return v.In
}

// GetIsNull returns IntComparisonExp.IsNull, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetIsNull() (val *bool) {
	if v == nil {
		return
	}
	return v.IsNull
}

// GetLt returns IntComparisonExp.Lt, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetLt() (val *int) {
	if v == nil {
		return
	}
	return v.Lt
}

// GetLte returns IntComparisonExp.Lte, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetLte() (val *int) {
	if v == nil {
		return
	}
	return v.Lte
}

// GetNeq returns IntComparisonExp.Neq, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetNeq() (val *int) {
	if v == nil {
		return
	}
	return v.Neq
}

// GetNin returns IntComparisonExp.Nin, and is useful for accessing the field via an interface.
func (v *IntComparisonExp) GetNin() (val []*int) {
	if v == nil {
		return
	}
	return v.Nin
}

// __GetPokemonInput is used internally by genqlient
type __GetPokemonInput struct {
	Where *GetPokemonBoolExp `json:"where"`
}

// GetWhere returns __GetPokemonInput.Where, and is useful for accessing the field via an interface.
func (v *__GetPokemonInput) GetWhere() (val *GetPokemonBoolExp) {
	if v == nil {
		return
	}
	return v.Where
}

// The query executed by GetPokemon.
const GetPokemon_Operation = `
query GetPokemon ($where: getPokemonBoolExp!) {
	getPokemon(where: $where) {
		species
		level
	}
}
`

func GetPokemon(
	client_ graphql.Client,
	where *GetPokemonBoolExp,
) (data_ *GetPokemonResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetPokemon",
		Query:  GetPokemon_Operation,
		Variables: &__GetPokemonInput{
			Where: where,
		},
	}

	data_ = &GetPokemonResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		nil,
		req_,
		resp_,
	)

	return data_, err_
}

